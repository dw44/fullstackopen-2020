{"version":3,"sources":["components/Filter.js","components/NewEntry.js","components/Display.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","handleChange","type","onChange","NewEntry","props","onSubmit","submit","value","nameValue","nameChange","numberValue","numberChange","Display","displayNames","Notification","message","className","baseURL","axios","get","then","response","data","newEntry","post","id","delete","updatedData","put","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filterValue","setFilterValue","notification","setNotification","useEffect","personServices","results","resetForms","handleDelete","window","confirm","filter","person","catch","error","name","setTimeout","trim","map","key","number","onClick","toLowerCase","includes","event","target","preventDefault","length","alert","foundPerson","find","updatedPerson","returnedPerson","Error","personObject","newPerson","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9464ba24.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// created for exercise 2.10\r\nconst Filter = ({ handleChange }) => {\r\n  return (\r\n    <div>\r\n      Filter by Name: <input type=\"text\" onChange={ handleChange } />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\n// created for exercise 2.10\r\nconst NewEntry = props => {\r\n  return (\r\n    <form onSubmit={ props.submit }>\r\n      <div>\r\n        Name: <input value={ props.nameValue } onChange={ props.nameChange } />\r\n      </div>\r\n      <div>\r\n        Number: <input value={ props.numberValue } onChange={ props.numberChange } />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">Add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default NewEntry;","import React from 'react';\r\n\r\n// created for exercise 2.10\r\nconst Display = ({ displayNames }) => {\r\n  return (\r\n    <section>\r\n      <h2>Numbers</h2>\r\n      <ul>\r\n        { displayNames }\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\n// created for exercise 2.19\r\nconst Notification = ({ message }) => {\r\n  if (message[0] === null) return null;\r\n  else {\r\n    if (message[1] === 'S') {\r\n      return (\r\n        <h2 className=\"notification-success\">{ message[0] }</h2>\r\n      );\r\n    } else {\r\n      return (\r\n        <h2 className=\"notification-error\">{ message[0] }</h2>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Notification;","import axios from 'axios';\r\n\r\nconst baseURL = '/api/persons';\r\n\r\n// This module is for exercise 2.16\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseURL).then(response => response.data);\r\n}\r\n\r\nconst create = newEntry => {\r\n  return axios.post(baseURL, newEntry).then(response => response.data);\r\n}\r\n\r\n// added for 2.17\r\nconst deleteEntry = id => {\r\n  return axios.delete(`${baseURL}/${id}`);\r\n}\r\n\r\n// added for 2.18\r\nconst updateEntry = (id, updatedData) => {\r\n  return axios.put(`${baseURL}/${id}`, updatedData).then(response => response.data);\r\n}\r\n\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  deleteEntry,\r\n  updateEntry\r\n};","import React, { useState, useEffect } from 'react';\r\n\r\nimport Filter from './components/Filter';\r\nimport NewEntry from './components/NewEntry';\r\nimport Display from './components/Display';\r\nimport Notification from './components/Notification';\r\nimport personServices from './services/persons';\r\n\r\n// initialized for exercise 2.6\r\nconst App = () => {\r\n  // refactored for exercise 2.11\r\n  const [ persons, setPersons ] = useState([]);\r\n  const [ newName, setNewName ] = useState('');\r\n  const [ newNumber, setNewNumber ] = useState('');\r\n  const [ filterValue, setFilterValue ] = useState('');\r\n  // first item is message, second is notification type: S for success, E for error\r\n  const [ notification, setNotification ] = useState([null, null]);\r\n\r\n  useEffect(() => {\r\n    personServices\r\n      .getAll()\r\n      .then(results => setPersons(results));\r\n  }, []);\r\n\r\n  // refactored for exercise 2.8\r\n  const handleChangeName = event => setNewName(event.target.value);\r\n\r\n  // added for exercise 2.8\r\n  const handleChangeNumber = event => setNewNumber(event.target.value);\r\n\r\n  // added for exercise 2.9\r\n  const handleChangeFilter = event => setFilterValue(event.target.value);\r\n\r\n  const resetForms = () => {\r\n    // helper function to reduce clutter\r\n    setNewName('');\r\n    setNewNumber('');\r\n    setFilterValue('');\r\n  }\r\n\r\n  const verifyFormFilled = () => {\r\n    // returns false if either name or number field is empty i.e. verification failed\r\n    if (newName.trim().length < 1 || newNumber.trim().length < 1) {\r\n      alert('Please enter a valid name and number. Neither field can be empty');\r\n      resetForms();\r\n      return false;\r\n    }\r\n    // return true if neither field is empty i.e. verification passed\r\n    return true;\r\n  }\r\n\r\n  // completely rewritten for 2.18\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    // verify that both fields are filled out\r\n    if (!verifyFormFilled()) return; \r\n    else {\r\n      // checks if a person entry for newName already exists\r\n      const nameExists = persons.filter(person => person.name === newName.trim()).length > 0;\r\n\r\n      if (nameExists) {\r\n        const foundPerson = persons.find(person => person.name === newName.trim());\r\n\r\n        // in case 'new' entry is exact copy of an older entry\r\n        if (newNumber === foundPerson.number) {\r\n          alert('This entry already exists');\r\n          resetForms();\r\n        } else {\r\n          // confirm with user before updating data\r\n          const confirmUpdate = window.confirm(`${foundPerson.name} is already added to the phonebook. Replace old number with a new one?`);\r\n          \r\n          if (confirmUpdate) {\r\n            const updatedPerson = {\r\n              ...foundPerson,\r\n              number: newNumber\r\n            };\r\n\r\n            // update person data \r\n            personServices\r\n              .updateEntry(foundPerson.id, updatedPerson)\r\n              .then(returnedPerson => {\r\n                setPersons(persons.map(person => person.id !== returnedPerson.id ? person : updatedPerson))\r\n                resetForms();\r\n                \r\n                // added for 2.19. Displayed upon succesfully updating an entry\r\n                setNotification([`Entry for ${ returnedPerson.name } succesfully updated!`, 'S']);\r\n                setTimeout(() => setNotification([null, null]), 5000);\r\n              })\r\n              .catch(error => {\r\n                // updated for 3.20\r\n                setNotification([error.response.data.Error, 'E']);\r\n                setTimeout(() => setNotification([null, null]), 5000);\r\n              });\r\n\r\n          } else { // if user chooses no to update prompt\r\n            resetForms();\r\n          }  \r\n        }\r\n      } else { \r\n        // if an entry for the name entered doesn't already exist\r\n        const personObject = {\r\n          name: newName.trim(),\r\n          number: newNumber.trim()\r\n        };\r\n\r\n        personServices\r\n          .create(personObject)\r\n          .then(newPerson => {\r\n            setPersons(persons.concat(newPerson));\r\n            resetForms();\r\n\r\n            // added for 2.19. Displayed upon succesfully adding an entry\r\n            setNotification([`Entry for ${ newPerson.name } succesfully added!`, 'S']);\r\n            setTimeout(() => setNotification([null, null]), 5000);\r\n          })\r\n          .catch(error => { // catch block added for exercise 3.20\r\n            setNotification([error.response.data.Error, 'E']);\r\n            setTimeout(() => setNotification([null, null]), 5000);\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  // added for exercise 2.17\r\n  const handleDelete = id => {\r\n    const confirm = window.confirm('Are you sure you want to delete this entry?');\r\n    if (confirm) {\r\n      personServices\r\n        .deleteEntry(id)\r\n        .then(() => {\r\n          // state changed inside \"then\" so it's only updated if request succeeds\r\n          setPersons(persons.filter(person => person.id !== id));\r\n        })\r\n        .catch(error => {\r\n          // added for 2.20\r\n          // displays a message and removes entry from state if already deleted from server\r\n          setNotification([\r\n            `The entry for ${persons[id-1].name} has already been deleted from the server`,\r\n            'E'\r\n          ]);\r\n          setTimeout(() => setNotification([null, null]), 5000);\r\n          setPersons(persons.filter(person => person.id !== id));\r\n        });\r\n    }\r\n  }\r\n\r\n  // refactored for 2.17, reformatted to reduce visual clutter \r\n  const displayNames = filterValue.trim() === '' \r\n    ? persons.map(person => \r\n        <li key={ person.id }>\r\n          { person.name } ( { person.number } ) \r\n          <button onClick = { () => handleDelete(person.id) }>Delete</button>\r\n        </li>\r\n      ) \r\n    : persons.filter(person => person.name.toLowerCase().includes(filterValue.toLowerCase())).map(person => \r\n        <li key={ person.id }>\r\n          { person.name } ( { person.number } )\r\n          <button onClick = { () => handleDelete(person.id) }>Delete</button>\r\n        </li>\r\n      );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <Notification message={ notification } />\r\n      <Filter handleChange={ handleChangeFilter } />\r\n      <NewEntry \r\n        submit={ handleSubmit }  \r\n        nameValue={ newName }\r\n        nameChange={ handleChangeName }\r\n        numberValue={ newNumber }\r\n        numberChange={ handleChangeNumber }\r\n      />\r\n      <Display displayNames={ displayNames } />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
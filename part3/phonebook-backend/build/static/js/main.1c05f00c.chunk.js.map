{"version":3,"sources":["components/Filter.js","components/NewEntry.js","components/Display.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","handleChange","type","onChange","NewEntry","submit","nameValue","nameChange","numberValue","numberChange","onSubmit","value","Display","displayNames","Notification","message","className","baseURL","axios","get","then","response","data","newEntry","post","id","delete","updatedData","put","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filterValue","setFilterValue","notification","setNotification","useEffect","personServices","results","resetForms","handleDelete","window","confirm","filter","person","catch","name","setTimeout","trim","map","key","number","onClick","toLowerCase","includes","event","target","preventDefault","length","alert","foundPerson","find","updatedPerson","returnedPerson","error","Error","personObject","newPerson","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c05f00c.chunk.js","sourcesContent":["import React from 'react';\n\n// created for exercise 2.10\nconst Filter = ({ handleChange }) => (\n  <div>\n    Filter by Name:\n    {' '}\n    <input type=\"text\" onChange={handleChange} />\n  </div>\n);\n\nexport default Filter;\n","import React from 'react';\n\n// created for exercise 2.10\nconst NewEntry = ({\n  submit, nameValue, nameChange, numberValue, numberChange,\n}) => (\n  <form onSubmit={submit}>\n    <div>\n      Name:\n      {' '}\n      <input value={nameValue} onChange={nameChange} />\n    </div>\n    <div>\n      Number:\n      {' '}\n      <input value={numberValue} onChange={numberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">Add</button>\n    </div>\n  </form>\n);\n\nexport default NewEntry;\n","import React from 'react';\n\n// created for exercise 2.10\nconst Display = ({ displayNames }) => (\n  <section>\n    <h2>Numbers</h2>\n    <ul>\n      { displayNames }\n    </ul>\n  </section>\n);\n\nexport default Display;\n","import React from 'react';\n\n// created for exercise 2.19\nconst Notification = ({ message }) => {\n  if (message[0] === null) return null;\n\n  if (message[1] === 'S') {\n    return (\n      <h2 className=\"notification-success\">{ message[0] }</h2>\n    );\n  }\n  return (\n    <h2 className=\"notification-error\">{ message[0] }</h2>\n  );\n};\n\nexport default Notification;\n","import axios from 'axios';\n\nconst baseURL = '/api/persons';\n\n// This module is for exercise 2.16\n\nconst getAll = () => axios.get(baseURL).then((response) => response.data);\n\nconst create = (newEntry) => axios.post(baseURL, newEntry).then((response) => response.data);\n\n// added for 2.17\nconst deleteEntry = (id) => axios.delete(`${baseURL}/${id}`);\n\n// added for 2.18\nconst updateEntry = (id, updatedData) => axios.put(`${baseURL}/${id}`, updatedData).then((response) => response.data);\n\nexport default {\n  getAll,\n  create,\n  deleteEntry,\n  updateEntry,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport Filter from './components/Filter';\nimport NewEntry from './components/NewEntry';\nimport Display from './components/Display';\nimport Notification from './components/Notification';\nimport personServices from './services/persons';\n\n// initialized for exercise 2.6\nconst App = () => {\n  // refactored for exercise 2.11\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  // first item is message, second is notification type: S for success, E for error\n  const [notification, setNotification] = useState([null, null]);\n\n  useEffect(() => {\n    personServices\n      .getAll()\n      .then((results) => setPersons(results));\n  }, []);\n\n  // refactored for exercise 2.8\n  const handleChangeName = (event) => setNewName(event.target.value);\n\n  // added for exercise 2.8\n  const handleChangeNumber = (event) => setNewNumber(event.target.value);\n\n  // added for exercise 2.9\n  const handleChangeFilter = (event) => setFilterValue(event.target.value);\n\n  const resetForms = () => {\n    // helper function to reduce clutter\n    setNewName('');\n    setNewNumber('');\n    setFilterValue('');\n  };\n\n  const verifyFormFilled = () => {\n    // returns false if either name or number field is empty i.e. verification failed\n    if (newName.trim().length < 1 || newNumber.trim().length < 1) {\n      alert('Please enter a valid name and number. Neither field can be empty');\n      resetForms();\n      return false;\n    }\n    // return true if neither field is empty i.e. verification passed\n    return true;\n  };\n\n  // completely rewritten for 2.18\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    // verify that both fields are filled out\n    if (!verifyFormFilled()) return;\n\n    // checks if a person entry for newName already exists\n    const nameExists = persons.filter((person) => person.name === newName.trim()).length > 0;\n\n    if (nameExists) {\n      const foundPerson = persons.find((person) => person.name === newName.trim());\n\n      // in case 'new' entry is exact copy of an older entry\n      if (newNumber === foundPerson.number) {\n        alert('This entry already exists');\n        resetForms();\n      } else {\n        // confirm with user before updating data\n        const confirmUpdate = window.confirm(`${foundPerson.name} is already added to the phonebook. Replace old number with a new one?`);\n\n        if (confirmUpdate) {\n          const updatedPerson = {\n            ...foundPerson,\n            number: newNumber,\n          };\n\n          // update person data\n          personServices\n            .updateEntry(foundPerson.id, updatedPerson)\n            .then((returnedPerson) => {\n              setPersons(persons.map((person) => (person.id !== returnedPerson.id\n                ? person\n                : updatedPerson)));\n              resetForms();\n\n              // added for 2.19. Displayed upon succesfully updating an entry\n              setNotification([`Entry for ${returnedPerson.name} succesfully updated!`, 'S']);\n              setTimeout(() => setNotification([null, null]), 5000);\n            })\n            .catch((error) => {\n              // updated for 3.20. error displayed for failing validation on update operations\n              setNotification([error.response.data.Error, 'E']);\n              setTimeout(() => setNotification([null, null]), 5000);\n            });\n        } else { // if user chooses no to update prompt\n          resetForms();\n        }\n      }\n    } else {\n      // if an entry for the name entered doesn't already exist\n      const personObject = {\n        name: newName.trim(),\n        number: newNumber.trim(),\n      };\n\n      personServices\n        .create(personObject)\n        .then((newPerson) => {\n          setPersons(persons.concat(newPerson));\n          resetForms();\n\n          // added for 2.19. Displayed upon succesfully adding an entry\n          setNotification([`Entry for ${newPerson.name} succesfully added!`, 'S']);\n          setTimeout(() => setNotification([null, null]), 5000);\n        })\n        .catch((error) => { // catch block added for exercise 3.20\n          setNotification([error.response.data.Error, 'E']);\n          setTimeout(() => setNotification([null, null]), 5000);\n        });\n    }\n  };\n\n  // added for exercise 2.17\n  const handleDelete = (id) => {\n    const confirm = window.confirm('Are you sure you want to delete this entry?');\n    if (confirm) {\n      personServices\n        .deleteEntry(id)\n        .then(() => {\n          // state changed inside \"then\" so it's only updated if request succeeds\n          setPersons(persons.filter((person) => person.id !== id));\n        })\n        .catch(() => {\n          // added for 2.20\n          // displays a message and removes entry from state if already deleted from server\n          setNotification([\n            `The entry for ${persons[id - 1].name} has already been deleted from the server`,\n            'E',\n          ]);\n          setTimeout(() => setNotification([null, null]), 5000);\n          setPersons(persons.filter((person) => person.id !== id));\n        });\n    }\n  };\n\n  // refactored for 2.17, reformatted to reduce visual clutter\n  const displayNames = filterValue.trim() === ''\n    ? persons.map((person) => (\n      <li key={person.id}>\n        { person.name }\n        {' '}\n        (\n        { person.number }\n        {' '}\n        )\n        <button onClick={() => handleDelete(person.id)}>Delete</button>\n      </li>\n    ))\n    : persons.filter((person) => person.name\n      .toLowerCase()\n      .includes(filterValue.toLowerCase()))\n      .map((person) => (\n        <li key={person.id}>\n          { person.name }\n          {' '}\n          (\n          { person.number }\n          {' '}\n          )\n          <button onClick={() => handleDelete(person.id)}>Delete</button>\n        </li>\n      ));\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <Notification message={notification} />\n      <Filter handleChange={handleChangeFilter} />\n      <NewEntry\n        submit={handleSubmit}\n        nameValue={newName}\n        nameChange={handleChangeName}\n        numberValue={newNumber}\n        numberChange={handleChangeNumber}\n      />\n      <Display displayNames={displayNames} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}